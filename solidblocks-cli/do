#!/usr/bin/env bash

set -eu

DIR="$(cd "$(dirname "$0")" ; pwd -P)"

source "${DIR}/../lib/utils.sh"

export VERSION="$(version)"

function task_usage {
  echo "Usage: $0 ..."
  exit 1
}

function task_test {
  if [[ "${SKIP_TESTS:-}" == "true" ]]; then
    exit 0
  fi

  ${DIR}/../gradlew check
}

function integration_test_blcks_wrapper() {
  if [[ -d "${DIR}/blcks" ]]; then
    "${DIR}/blcks/bin/blcks" $@
  else
    "${DIR}/blcks" $@
  fi
}

function task_test_hetzner_nuke {
  if [[ "${SKIP_TESTS:-}" == "true" ]]; then
    exit 0
  fi

  export HCLOUD_TOKEN="${HCLOUD_TOKEN:-$(pass solidblocks/hetzner/test/hcloud_api_token)}"

  (
    cd "${DIR}/test/hetzner_nuke"
    terraform init -upgrade
    terraform apply -auto-approve
  )

  divider_header "--help"
  integration_test_blcks_wrapper --help
  divider_footer

  divider_header "hetzner --help"
  integration_test_blcks_wrapper hetzner --help
  divider_footer

  divider_header "hetzner nuke --help"
  integration_test_blcks_wrapper hetzner nuke --help
  divider_footer

  divider_header "hetzner nuke"
  integration_test_blcks_wrapper hetzner nuke
  divider_footer

  divider_header "hetzner nuke --do-nuke"
  integration_test_blcks_wrapper hetzner nuke --do-nuke
  divider_footer
}

function task_test_terraform {
  if [[ "${SKIP_TESTS:-}" == "true" ]]; then
    exit 0
  fi

  export AWS_REGION="eu-central-1"
  export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID:-$(pass solidblocks/aws/admin/access_key_id)}"
  export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY:-$(pass solidblocks/aws/admin/secret_access_key)}"

  divider_header "--help"
  integration_test_blcks_wrapper --help
  divider_footer

  divider_header "terraform --help"
  integration_test_blcks_wrapper terraform --help
  divider_footer

  divider_header "tofu --help"
  integration_test_blcks_wrapper tofu --help
  divider_footer

  divider_header "terraform backends --help"
  integration_test_blcks_wrapper terraform backends --help
  divider_footer

  divider_header "tofu backends --help"
  integration_test_blcks_wrapper tofu backends --help
  divider_footer

  divider_header "terraform backends s3 --help"
  integration_test_blcks_wrapper terraform backends s3 --help
  divider_footer

  divider_header "tofu backends s3 --help"
  integration_test_blcks_wrapper tofu backends s3 --help
  divider_footer

  local bucket="test-terraform-$(uuidgen)"

  divider_header "terraform backends s3"
  integration_test_blcks_wrapper terraform backends s3 "${bucket}"
  integration_test_blcks_wrapper terraform backends s3 "${bucket}"
  divider_footer

  divider_header "terraform backends --file /tmp/${bucket}.tf s3"
  integration_test_blcks_wrapper terraform backends s3 --file "/tmp/${bucket}.tf" "${bucket}"
  divider_footer

  bucket="test-tofu-$(uuidgen)"

  divider_header "tofu backends s3"
  integration_test_blcks_wrapper tofu backends s3 "${bucket}"
  divider_footer

  divider_header "tofu backends --file /tmp/${bucket}.tf s3"
  integration_test_blcks_wrapper tofu backends s3 --file "/tmp/${bucket}.tf" "${bucket}"
  divider_footer
}

function task_test_workflow {
  (
    cd ${DIR}/test/no_workflow_file

    divider_header "no_workflow_file -> check"
    integration_test_blcks_wrapper workflow check || true
    divider_footer

    divider_header "no_workflow_file --> --help"
    integration_test_blcks_wrapper workflow --help
    divider_footer
  )

  (
    cd ${DIR}/test/testbed1

    divider_header "testbed1 --> workflow --help"
    "${DIR}/blcks" workflow --help
    divider_footer

    divider_header "testbed1 --> workflow example"
    "${DIR}/blcks" workflow example
    divider_footer

    divider_header "testbed1 --> workflow check"
    "${DIR}/blcks" workflow check
    divider_footer
  )

  (
     cd ${DIR}/test/testbed2

    divider_header "testbed2 --> workflow check"
    "${DIR}/blcks" workflow check || true
    divider_footer
  )
}

function task_test_integration {
  if [[ "${SKIP_TESTS:-}" == "true" ]]; then
    exit 0
  fi
  task_test_terraform
  task_test_hetzner_nuke
}

function divider_header() {
  echo "==================================================================================="
  echo $@
  echo "-----------------------------------------------------------------------------------"
}

function divider_footer() {
  echo "==================================================================================="
  echo ""
  echo ""
}

function task_build_darwin_arm64 {
  export BUILD_TARGET="darwin-arm64"
  task_build
}

function task_build_darwin_amd64 {
  export BUILD_TARGET="darwin-amd64"
  task_build
}

function task_build_linux_amd64 {
  export BUILD_TARGET="linux-amd64"
  task_build
}

function task_build_windows_amd64 {
  export BUILD_TARGET="windows-amd64"
  choco install zip
  # graalvm native image build fails when the vm and the sources are on different drives
  (
    mkdir -p "/c/solidblocks"
    cp -r ${DIR}/../ "/c/solidblocks"
  )
  task_build "/c/solidblocks"
}

function task_build {
  BUILD_TARGET="${BUILD_TARGET:-linux-amd64}"
  local dir="${1:-${DIR}/..}"
  (
    cd ${dir}
    ./gradlew --stacktrace :solidblocks-cli:nativeCompile
    rm -rf ${DIR}/blcks
    cp solidblocks-cli/build/native/nativeCompile/blcks* ${DIR}/blcks
    chmod +x ${DIR}/blcks
    mkdir -p "${DIR}/build"
    zip --junk-paths "${DIR}/build/solidblocks-cli-${BUILD_TARGET}-${VERSION}.zip" ${DIR}/blcks
  )
}

function task_install_local {
  task_build_linux_amd64
  cp ${DIR}/blcks ~/bin/blcks
}

function task_build_jvm_all {
  ${DIR}/../gradlew distZip distTar
  (
    rm -rf ${DIR}/blcks
    mkdir -p "${DIR}/blcks/blcks"
    cd "${DIR}/blcks/blcks"
    tar -xvf "${DIR}/build/distributions/blcks-${VERSION}.tar" --strip-components=1
    cd "${DIR}/blcks"
    mkdir -p "${DIR}/build"
    zip -vr "${DIR}/build/solidblocks-cli-jvm-all-${VERSION}.zip" ./
  )
}

function task_clean {
  "${DIR}/../gradlew" clean
  rm -rf "${DIR}/blcks"
}

arg=${1:-}
shift || true
case ${arg} in
  build) task_build "$@" ;;
  install-local) task_install_local "$@" ;;
  build-jvm-all) task_build_jvm_all "$@" ;;
  build-darwin-arm64) task_build_darwin_arm64 "$@" ;;
  build-darwin-amd64) task_build_darwin_amd64 "$@" ;;
  build-linux-amd64) task_build_linux_amd64 "$@" ;;
  build-windows-amd64) task_build_windows_amd64 "$@" ;;
  test) task_test "$@" ;;
  test-integration) task_test_integration "$@" ;;
  test-hetzner-nuke) task_test_hetzner_nuke "$@" ;;
  test-terraform) task_test_terraform "$@" ;;
  release-prepare) ;;
  release-artifacts) ;;
  format) ;;
  clean) task_clean "$@" ;;
  *) task_usage ;;
esac