#!/usr/bin/env bash

set -eu

DIR="$(cd "$(dirname "$0")" ; pwd -P)"

source "${DIR}/../lib/utils.sh"

export VERSION="$(version)"

DEFAULT_BUILD_TARGET=${BUILD_TARGET:-linuxX64}

function task_usage {
  echo "Usage: $0 ..."
  exit 1
}

function task_test {
  if [[ "${SKIP_TESTS:-}" == "true" ]]; then
    exit 0
  fi

  ${DIR}/gradlew ${DEFAULT_BUILD_TARGET}Test
}

function task_test_hetzner_nuke {
  if [[ "${SKIP_TESTS:-}" == "true" ]]; then
    exit 0
  fi

  export HCLOUD_TOKEN="${HCLOUD_TOKEN:-$(pass solidblocks/hetzner/test/hcloud_api_token)}"

  (
    cd "${DIR}/test/hetzner_nuke"
    terraform init -upgrade
    terraform apply -auto-approve
  )

  divider_header "--help"
  "${DIR}/blcks-${BUILD_TARGET}-${VERSION}" --help
  divider_footer

  divider_header "hetzner --help"
  "${DIR}/blcks-${BUILD_TARGET}-${VERSION}" hetzner --help
  divider_footer

  divider_header "hetzner nuke --help"
  "${DIR}/blcks-${BUILD_TARGET}-${VERSION}" hetzner nuke --help
  divider_footer

  divider_header "hetzner nuke"
  "${DIR}/blcks-${BUILD_TARGET}-${VERSION}" hetzner nuke
  divider_footer

  divider_header "hetzner nuke --do-nuke"
  "${DIR}/blcks-${BUILD_TARGET}-${VERSION}" hetzner nuke --do-nuke
  divider_footer
}

function task_test_workflow {
  (
    cd ${DIR}/test/no_workflow_file

    divider_header "no_workflow_file -> check"
    "${DIR}/blcks-${BUILD_TARGET}-${VERSION}" workflow check || true
    divider_footer

    divider_header "no_workflow_file --> --help"
    "${DIR}/blcks-${BUILD_TARGET}-${VERSION}" workflow --help
    divider_footer
  )

  (
    cd ${DIR}/test/testbed1

    divider_header "testbed1 --> workflow --help"
    "${DIR}/blcks-${BUILD_TARGET}-${VERSION}" workflow --help
    divider_footer

    divider_header "testbed1 --> workflow example"
    "${DIR}/blcks-${BUILD_TARGET}-${VERSION}" workflow example
    divider_footer

    divider_header "testbed1 --> workflow check"
    "${DIR}/blcks-${BUILD_TARGET}-${VERSION}" workflow check
    divider_footer
  )

  (
     cd ${DIR}/test/testbed2

    divider_header "testbed2 --> workflow check"
    "${DIR}/blcks-${BUILD_TARGET}-${VERSION}" workflow check || true
    divider_footer
  )
}

function task_test_integration {
  if [[ "${SKIP_TESTS:-}" == "true" ]]; then
    exit 0
  fi
  task_test_hetzner_nuke
}

function divider_header() {
  echo "==================================================================================="
  echo $@
  echo "-----------------------------------------------------------------------------------"
}

function divider_footer() {
  echo "==================================================================================="
  echo ""
  echo ""
}

function task_build_macosX64 {
  task_build "macosX64"
}

function task_build_macosArm64 {
  task_build "macosArm64"
}

function task_build_linuxX64 {
  if [[ "${CI:-}" == "true" ]]; then
    sudo apt-get update
    sudo apt-get install libcurl4-gnutls-dev
  fi

  task_build "linuxX64"
}

function task_build_mingwX64 {
  task_build "mingwX64"
}

function task_build {
  local target=${1:-$DEFAULT_BUILD_TARGET}
  ${DIR}/gradlew "${target}Binaries"
  find "${DIR}/build/bin/${target}/releaseExecutable/" -type f -exec cp {} ${DIR}/blcks-${target}-${VERSION} \;
  chmod +x ${DIR}/blcks-${target}-${VERSION}
}

function task_install {
  local target=${1:-$DEFAULT_BUILD_TARGET}
  task_build
  cp ${DIR}/blcks-${target}-${VERSION} ~/bin/blcks
}

function task_build_jvm {
  ${DIR}/gradlew jvmDistZip
  find "${DIR}/build/distributions/solidblocks-cli-${VERSION}-jvm.zip" -type f -exec cp {} ${DIR}/blcks-jvm-${VERSION}.zip \;
}

function task_clean {
  ${DIR}/gradlew clean
}

arg=${1:-}
shift || true
case ${arg} in
  build) task_build "$@" ;;
  install) task_install "$@" ;;
  build-jvm) task_build_jvm "$@" ;;
  build-macosX64) task_build_macosX64 "$@" ;;
  build-macosArm64) task_build_macosArm64 "$@" ;;
  build-linuxX64) task_build_linuxX64 "$@" ;;
  build-mingwX64) task_build_mingwX64 "$@" ;;
  test) task_test "$@" ;;
  test-integration) task_test_integration "$@" ;;
  test-hetzner-nuke) task_test_hetzner_nuke "$@" ;;
  release-prepare) ;;
  release-artifacts) ;;
  format) ;;
  clean) task_clean "$@" ;;
  *) task_usage ;;
esac