#!/usr/bin/env bash

set -eu

DIR="$(cd "$(dirname "$0")" ; pwd -P)"

source "${DIR}/../solidblocks-shell/lib/software.sh"
source "${DIR}/../lib/utils.sh"

export VERSION="$(version)"

DOCKER_REGISTRY="ghcr.io"
DOCKER_REPOSITORY="pellepelster"
DOCKER_IMAGE_NAME="solidblocks-debug-container"
DOCKER_OPTIONS="${DOCKER_OPTIONS:-}"


function task_usage {
  echo "Usage: $0 ..."
  exit 1
}

function task_test {
  if [[ "${SKIP_TESTS:-}" == "true" ]]; then
    exit 0
  fi

  ${DIR}/../gradlew :solidblocks-debug-container:integrationTest
}

function task_build {
  (
    cd "${DIR}"
    ${DIR}/../gradlew :solidblocks-debug-container:assemble

    echo "building '${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:${VERSION}'"
    docker buildx build \
      --build-arg VERSION=${VERSION} \
      --platform linux/amd64 \
      --push \
      --tag "${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:${VERSION}-snapshot" \
      --tag "${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:snapshot" \
      .
  )
}

function task_release_artifacts {
  docker buildx imagetools create -t "${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:${VERSION}" "${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:${VERSION}-snapshot"
}

function task_release_prepare {
  local version="${1:-}"

  if [[ -z "${version}" ]]; then
    echo "no version set"
    exit 1
  fi
  echo "setting version: ${version}"
}

function task_clean {
  ${DIR}/../gradlew :solidblocks-debug-container:clean
}

function task_format {
  ${DIR}/../gradlew :solidblocks-debug-container:spotlessApply
}

arg=${1:-}
shift || true
case ${arg} in
  build) task_build "$@" ;;
  test) task_test "$@" ;;
  format) task_format "$@" ;;
  clean) task_clean "$@" ;;
  release-artifacts) task_release_artifacts "$@" ;;
  release-prepare) task_release_prepare "$@" ;;
  release-test);;
  *) task_usage ;;
esac