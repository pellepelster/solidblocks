#!/usr/bin/env bash

set -eu

DIR="$(cd "$(dirname "$0")" ; pwd -P)"

source "${DIR}/../lib/utils.sh"

export VERSION="$(version)"
export VERSION_RC="$(version_rc)"

DOCKER_REGISTRY="ghcr.io"
DOCKER_REPOSITORY="pellepelster"
DOCKER_IMAGE_NAME="solidblocks-rds-postgresql"
DOCKER_OPTIONS="${DOCKER_OPTIONS:---push}"
DOCKER_PLATFORM="${DOCKER_PLATFORM:-linux/amd64,linux/arm64}"

POSTGRES_VERSIONS="${POSTGRES_VERSIONS:-14 15 16 17 18}"

TEMP_DIR="${DIR}/.test_$$"
CACHE_DIR="${DIR}/.cache"
mkdir -p "${CACHE_DIR}"

function clean_temp_dir {
  rm -rf "${TEMP_DIR}"
}

trap clean_temp_dir EXIT

source "${DIR}/../solidblocks-shell/lib/software.sh"

function task_usage {
  echo "Usage: $0 ..."
  exit 1
}

function task_test {
  if [[ "${SKIP_TESTS:-}" == "true" ]]; then
    exit 0
  fi

  mkdir -p "${TEMP_DIR}"

  software_ensure_terraform
  software_set_export_path
  (
    cd "${DIR}/terraform"
    terraform init
    terraform apply --auto-approve
  )
  (
    export GCP_SERVICE_ACCOUNT_KEY="${GCP_SERVICE_ACCOUNT_KEY:-$(pass solidblocks/gcp/test/service_account_key)}"
    echo "${GCP_SERVICE_ACCOUNT_KEY}" > "${TEMP_DIR}/service-key.json"
    export GOOGLE_APPLICATION_CREDENTIALS="${TEMP_DIR}/service-key.json"
    export DB_BACKUP_GCS_SERVICE_KEY_BASE64="$(cat "${TEMP_DIR}/service-key.json" | base64 -w0)"

    ${DIR}/../gradlew :solidblocks-rds-postgresql:test $@
  )
}

function task_build {
  (
    cd "${DIR}"
    mkdir -p "${DIR}/build"

    for postgres_version in ${POSTGRES_VERSIONS}; do

      local postgres_previous_version=$((postgres_version-1))
      local postgres_previous_version_path=${postgres_previous_version}

      echo "========================================================================"
      echo "postgres_version: ${postgres_version}"
      echo "postgres_previous_version: ${postgres_previous_version}"
      echo "docker platform: ${DOCKER_PLATFORM}"
      echo "docker options: ${DOCKER_OPTIONS}"
      echo "========================================================================"

      docker buildx build \
        --platform ${DOCKER_PLATFORM} \
        ${DOCKER_OPTIONS} \
        --cache-to=type=local,dest=${CACHE_DIR} \
        --cache-from=type=local,src=${CACHE_DIR} \
        --build-arg POSTGRES_VERSION=${postgres_version} \
        --build-arg POSTGRES_PREVIOUS_VERSION=${postgres_previous_version} \
        --tag "${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:${postgres_version}-${VERSION_RC}" \
        --tag "${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:${postgres_version}-snapshot-rc" \
        .
    done
  )
}

function task_release_artifacts {
  for postgres_version in ${POSTGRES_VERSIONS}; do
    docker buildx imagetools create --tag "${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:${postgres_version}-${VERSION}" "${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:${postgres_version}-${VERSION_RC}"
  done
}

function task_release_prepare {
  local version="${1:-}"

  if [[ -z "${version}" ]]; then
    echo "no version set"
    exit 1
  fi
  echo "setting version: ${version}"
}

function task_clean {
  rm -rf "${DIR}/build"
  rm -rf ${DIR}/test/terraform/.terraform
  rm -rf ${DIR}/test/terraform/*.tfstate
  rm -rf ${DIR}/test/terraform/*.tfstate.backup
  rm -rf ${DIR}/test/terraform/*.lock.hcl
}

function task_format {
  (
    cd "${DIR}/test"
    terraform fmt -recursive
  )
}

arg=${1:-}
shift || true
case ${arg} in
  build) task_build "$@" ;;
  test) task_test "$@" ;;
  format) task_format "$@" ;;
  clean) task_clean "$@" ;;
  release-artifacts) task_release_artifacts "$@" ;;
  release-prepare) task_release_prepare "$@" ;;
  release-test);;
  dev-build) DOCKER_OPTIONS=" "  DOCKER_PLATFORM="linux/amd64" task_build;;
  *) task_usage ;;
esac