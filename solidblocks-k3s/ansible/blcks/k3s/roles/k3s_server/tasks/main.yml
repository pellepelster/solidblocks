---
- name: "add k3s autocomplete to user bashrc"
  ansible.builtin.lineinfile:
    path: "~/.bashrc"
    regexp: '\.\s+<\(k3s completion bash\)'
    line: ". <(k3s completion bash)  # added by ansible"

- name: "create k3s data dir {{ k3s_data_dir }}"
  ansible.builtin.file:
    path: "{{ k3s_data_dir }}"
    state: directory
    mode: '0600'

- name: "copy k3s service file"
  register: k3s_service
  ansible.builtin.template:
    src: k3s.service.j2
    dest: "/etc/systemd/system/k3s.service"
    owner: root
    group: root
    mode: "0644"

- name: "enable and start k3s service on first node"
  ansible.builtin.systemd:
    name: k3s
    daemon_reload: true
    state: started
    enabled: true
  when: inventory_hostname == groups['k3s_servers'][0]

- name: "set k3s env"
  ansible.builtin.template:
    src: k3s.sh.j2
    dest: "/etc/profile.d/k3s.sh"
    owner: root
    group: root
    mode: "0755"

- name: "install k9s"
  ansible.builtin.apt:
    deb: https://github.com/derailed/k9s/releases/download/v0.32.7/k9s_linux_amd64.deb

- name: "setup helm"
  ansible.builtin.include_tasks:
    file: helm.yml

- name: "setup cilium"
  ansible.builtin.include_tasks:
    file: cilium.yml
  run_once: true

- name: "install python3-kubernetes"
  ansible.builtin.package:
    name: python3-kubernetes
    state: present

- name: "wait for k3s port"
  ansible.builtin.wait_for:
    state: started
    port: 6443
  when: inventory_hostname == groups['k3s_servers'][0]

- name: "enable and start k3s service on all nodes"
  ansible.builtin.systemd:
    name: k3s
    daemon_reload: true
    state: started
    enabled: true
  when: inventory_hostname != groups['k3s_servers'][0]

- name: "wait for node-token"
  ansible.builtin.wait_for:
    path: "{{ k3s_data_dir }}/server/node-token"

- name: get contents of manifests folder
  ansible.builtin.find:
    paths: /var/lib/rancher/k3s/server/manifests
    file_type: file
  register: k3s_server_manifests

- name: get sub dirs of manifests folder
  ansible.builtin.find:
    paths: /var/lib/rancher/k3s/server/manifests
    file_type: directory
  register: k3s_server_manifests_directories

- name: remove manifests and folders that are only needed for bootstrapping cluster so k3s doesn't auto apply on start
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  with_items:
    - "{{ k3s_server_manifests.files }}"
    - "{{ k3s_server_manifests_directories.files }}"
  loop_control:
    label: "{{ item.path }}"
