---
- name: "setup postgres"
  ansible.builtin.include_role:
    name: blcks.rds_postgresql.common
    public: true

- name: "setup pgbackrest"
  ansible.builtin.include_role:
    name: blcks.rds_postgresql.pgbackrest
    public: true

- name: "bootstrap database"
  ansible.builtin.include_tasks:
    file: bootstrap.yml
  when: data_dir_empty and not restore_available and is_primary

- name: "restore database"
  ansible.builtin.include_tasks:
    file: restore.yml
  when: data_dir_empty and restore_available and stanza_exists and is_primary

- name: "install postgres config file"
  ansible.builtin.template:
    src: postgresql.conf.j2
    dest: "{{ data_dir }}/postgresql.conf"
    owner: postgres
    mode: '0600'

- name: "install authentication config file"
  ansible.builtin.template:
    src: pg_hba.conf.j2
    dest: "{{ data_dir }}/pg_hba.conf"
    owner: postgres
    mode: '0600'

- name: "starting postgres"
  ansible.builtin.systemd_service:
    state: started
    name: "{{ service_name }}"
  when: is_primary

- name: "create backup stanza"
  ansible.builtin.command: pgbackrest --stanza={{ stanza_name }} stanza-create
  become: yes
  become_user: postgres
  when: is_primary and not stanza_exists

- name: "run initial full backup"
  ansible.builtin.command: "/usr/local/bin/{{ stanza_name }}-backup-full.sh"
  when: is_primary and not stanza_exists
