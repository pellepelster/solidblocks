---
- name: "setup postgres"
  ansible.builtin.include_role:
    name: blcks.rds_postgresql.common
    public: true

- name: "setup pgbackrest"
  ansible.builtin.include_role:
    name: blcks.rds_postgresql.pgbackrest
    public: true

- name: "bootstrap database"
  ansible.builtin.include_tasks:
    file: bootstrap.yml
  when: data_dir_empty and not restore_available and is_primary

################################################
# check for previous postgres version and data #
################################################
- name: "check if previous version exists"
  ansible.builtin.stat:
    path: "/usr/lib/postgresql/{{ ((postgres_version | int) - 1) }}/bin/initdb"
  register: previous_version

- name: "check if previous data exists"
  ansible.builtin.stat:
    path: "{{ postgres_data_base_dir }}/{{ ((postgres_version | int) - 1) }}/PG_VERSION"
  register: previous_data

- name: "setting facts"
  ansible.builtin.set_fact:
    previous_version_exists: "{{ previous_version.stat.exists }}"
    previous_data_exists: "{{ previous_data.stat.exists }}"
    previous_postgres_version: "{{ ((postgres_version | int) - 1) }}"

- name: "show previous data and version facts"
  ansible.builtin.debug:
    msg: "previous_postgres_version: {{ previous_postgres_version }}, previous_version_exists: {{ previous_version_exists }}, previous_data_exists: {{ previous_data_exists }}"

- name: "migrate old data"
  ansible.builtin.include_tasks:
    file: migrate.yml
  when: data_dir_empty and previous_data_exists and previous_version_exists and is_primary

- name: "restore database"
  ansible.builtin.include_tasks:
    file: restore.yml
  when: data_dir_empty and restore_available and stanza_exists and is_primary and not previous_data_exists

- name: "install postgres config file"
  ansible.builtin.template:
    src: postgresql.conf.j2
    dest: "{{ postgres_data_dir }}/postgresql.conf"
    owner: postgres
    mode: '0600'

- name: "install authentication config file"
  ansible.builtin.template:
    src: pg_hba.conf.j2
    dest: "{{ postgres_data_dir }}/pg_hba.conf"
    owner: postgres
    mode: '0600'

- name: "starting postgres"
  ansible.builtin.systemd_service:
    state: started
    name: "{{ service_name }}"
  when: is_primary

- name: "create backup stanza"
  ansible.builtin.command: pgbackrest --stanza={{ stanza_name }} stanza-create
  become: yes
  become_user: postgres
  when: is_primary and not stanza_exists

- name: "run initial full backup"
  ansible.builtin.command: "/usr/local/bin/{{ stanza_name }}-backup-full.sh"
  when: is_primary and not stanza_exists
