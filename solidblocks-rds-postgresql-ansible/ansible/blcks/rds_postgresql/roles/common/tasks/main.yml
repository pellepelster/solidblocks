---
- name: "populate service facts"
  ansible.builtin.service_facts:

- name: "setting database facts"
  ansible.builtin.set_fact:
    primary_node_hostvars: "{{ hostvars[primary_node] }}"
    is_primary: "{{ inventory_hostname == primary_node }}"

- name: "primary node not found"
  ansible.builtin.fail:
    msg: "primary node '{{ primary_node }}' not found"
  when: not primary_node_hostvars

- name: "database facts"
  ansible.builtin.debug:
    msg: "is_primary: {{ is_primary }}, data_device: {{ primary_node_hostvars['data_device'] }}"

- name: "mount data disk"
  ansible.posix.mount:
    path: "{{ storage_mount }}"
    src: "{{ data_device }}"
    fstype: ext4
    state: mounted

- name: "enforce minimum ansible version"
  ansible.builtin.assert:
    that:
      - ansible_version.full is version('2.14', '>=')
    msg: "minimum ansible-core version required is 2.14"

- name: "update apt"
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 3600

- name: "upgrade packages"
  ansible.builtin.apt:
    upgrade: full

- name: "install python3-psycopg2"
  ansible.builtin.package:
    name: python3-psycopg2
    state: present

- name: "add postgres repository key"
  ansible.builtin.get_url:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
    dest: /etc/apt/trusted.gpg.d/apt.postgresql.org.asc
    checksum: sha256:0144068502a1eddd2a0280ede10ef607d1ec592ce819940991203941564e8e76

- name: "add postgres repository"
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/etc/apt/trusted.gpg.d/apt.postgresql.org.asc] https://apt.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg main"
    state: present
    update_cache: true

- name: "install postgresql"
  ansible.builtin.package:
    name: "postgresql-{{ postgres_version }}"
    state: present

- name: "disable default postgres instance"
  ansible.builtin.systemd_service:
    name: postgresql@{{ postgres_version }}-main.service
    enabled: false
    state: stopped

- name: "create postgres data dir"
  ansible.builtin.file:
    path: "{{ postgres_data_dir }}"
    state: directory
    owner: postgres
    group: postgres

- name: "check postgres data dir needs to be initialized"
  find:
    paths: "{{ postgres_data_dir }}"
  register: postgres_data_dir_content

- name: "set data dir facts"
  ansible.builtin.set_fact:
    postgres_data_dir_empty: "{{ postgres_data_dir_content.matched == 0 }}"

- name: "data dir facts"
  ansible.builtin.debug:
    msg: "postgres_data_dir_empty: {{ postgres_data_dir_empty }}"

- name: "setup pglogical extension"
  ansible.builtin.include_tasks:
    file: extensions/pglogical.yml
  when: extension_pglogical_enabled

- name: "setup pgaudit extension"
  ansible.builtin.include_tasks:
    file: extensions/pgaudit.yml
  when: extension_pgaudit_enabled

- name: "setup pgvector extension"
  ansible.builtin.include_tasks:
    file: extensions/pgvector.yml
  when: extension_pgvector_enabled

- name: "setup postgis extension"
  ansible.builtin.include_tasks:
    file: extensions/postgis.yml
  when: extension_postgis_enabled

- name: "setup pg_ivm extension"
  ansible.builtin.include_tasks:
    file: extensions/pg_ivm.yml
  when: extension_pg_ivm_enabled

- name: "setup pgbackrest"
  ansible.builtin.include_tasks:
    file: pgbackrest.yml

- name: "bootstrap database"
  ansible.builtin.include_tasks:
    file: bootstrap.yml
  when: postgres_data_dir_empty and not restore_available

- name: "restore database"
  ansible.builtin.include_tasks:
    file: restore.yml
  when: postgres_data_dir_empty and restore_available and stanza_exists

- name: "install postgres systemd unit file"
  ansible.builtin.template:
    src: postgres.service.j2
    dest: "/etc/systemd/system/{{ service_name }}.service"
    mode: '0600'

- name: "install postgres config file"
  ansible.builtin.template:
    src: postgresql.conf.j2
    dest: "{{ postgres_data_dir }}/postgresql.conf"
    owner: postgres
    mode: '0600'

- name: "install postgres password file"
  ansible.builtin.template:
    src: .pgpass.j2
    dest: "{{ postgres_data_dir }}/.pgpass"
    owner: postgres
    mode: '0600'

- name: "install authentication config file"
  ansible.builtin.template:
    src: pg_hba.conf.j2
    dest: "{{ postgres_data_dir }}/pg_hba.conf"
    owner: postgres
    mode: '0600'

- name: "load postgres systemd unit"
  ansible.builtin.systemd_service:
    daemon_reload: true
    enabled: true
    name: "{{ service_name }}"

- name: "create storage dir"
  ansible.builtin.file:
    path: "{{ postgres_data_dir }}"
    state: directory
    owner: postgres
    group: postgres
    mode: '0700'

- name: "starting postgres"
  ansible.builtin.systemd_service:
    state: started
    name: "{{ service_name }}"
#  when: postgres_data_dir_empty

- name: "create backup stanza"
  ansible.builtin.command: pgbackrest --stanza={{ pgbackrest_stanza_name }} stanza-create
  become: yes
  become_user: postgres
  when: is_primary and not stanza_exists

- name: "run initial full backup"
  ansible.builtin.command: "/usr/local/bin/{{ pgbackrest_stanza_name }}-backup-full.sh"
  when: is_primary and not stanza_exists

- name: "write psql.j2"
  ansible.builtin.template:
    src: psql.j2
    dest: "/usr/local/bin/{{ pgbackrest_stanza_name }}-psql"
    mode: '0755'
