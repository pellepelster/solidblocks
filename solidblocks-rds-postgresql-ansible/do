#!/usr/bin/env bash

set -eu

DIR="$(cd "$(dirname "$0")" ; pwd -P)"

source "${DIR}/../lib/utils.sh"
source "${DIR}/../solidblocks-shell/lib/python.sh"

export VERSION="$(version)"
export VENV_DIR="${DIR}/.venv"
export HCLOUD_TOKEN="${HCLOUD_TOKEN:-$(pass solidblocks/hetzner/test/hcloud_api_token)}"
export SCW_ACCESS_KEY="${SCW_ACCESS_KEY:-$(pass solidblocks/scaleway/test/access_key_id)}"
export SCW_SECRET_KEY="${SCW_SECRET_KEY:-$(pass solidblocks/scaleway/test/secret_key)}"
export SCW_DEFAULT_ORGANIZATION_ID="${SCW_DEFAULT_ORGANIZATION_ID:-$(pass solidblocks/scaleway/oranization_id)}"
export TF_VAR_scw_organization_id="${SCW_DEFAULT_ORGANIZATION_ID}"
export TF_VAR_environment="test"
export TF_VAR_location="nbg1"
export TF_VAR_name="test1"

TEMP_DIR="${DIR}/.test_$$"

function clean_temp_dir {
  rm -rf "${TEMP_DIR}"
}

function ensure_test_id() {
  if [[ ! -f "${DIR}/test.id" ]]; then
    tr -dc A-Za-z0-9 </dev/urandom | head -c 13 > "${DIR}/test.id"
  fi
}

ensure_test_id
export TEST_ID="$(cat "${DIR}/test.id")"

trap clean_temp_dir EXIT

source "${DIR}/../solidblocks-shell/lib/software.sh"

function test_terraform {
  (
    local module="${1:-}"
    shift || true
    cd "${DIR}/test/terraform/${module}"
    terraform  $@
  )
}

function task_usage {
  echo "Usage: $0 ..."
  exit 1
}

function task_test_terraform {
  test_terraform "storage" init -upgrade
  test_terraform "storage" apply -auto-approve

  test_terraform "backup" init -upgrade
  test_terraform "backup" apply -auto-approve

  export TF_VAR_backup_s3_bucket=$(test_terraform "backup" output backup_s3_bucket)
  export TF_VAR_backup_s3_endpoint=$(test_terraform "backup" output backup_s3_endpoint)
  export TF_VAR_backup_s3_key=$(test_terraform "backup" output backup_s3_key)
  export TF_VAR_backup_s3_key_secret=$(test_terraform "backup" output backup_s3_key_secret)
  export TF_VAR_backup_s3_region=$(test_terraform "backup" output backup_s3_region)

  test_terraform "instance" init -upgrade
  test_terraform "instance" apply -auto-approve
}

function task_destroy_instances {
  export TF_VAR_backup_s3_bucket=$(test_terraform "backup" output backup_s3_bucket)
  export TF_VAR_backup_s3_endpoint=$(test_terraform "backup" output backup_s3_endpoint)
  export TF_VAR_backup_s3_key=$(test_terraform "backup" output backup_s3_key)
  export TF_VAR_backup_s3_key_secret=$(test_terraform "backup" output backup_s3_key_secret)
  export TF_VAR_backup_s3_region=$(test_terraform "backup" output backup_s3_region)

  test_terraform "instance" destroy -auto-approve
}

function task_destroy_storage {
  test_terraform "storage" destroy -auto-approve
}

function ssh_wrapper() {
  ssh -F "${DIR}/test/terraform/output/test/ssh/client_config" test-test1-database1-blue "$@"
}

function task_full_backup() {
  ssh_wrapper /usr/local/bin/test-database1-backup-full.sh
}

function task_test_after_bootstrap {
  python_ensure_venv "${DIR}"

  "${VENV_DIR}/bin/py.test" \
    --capture=tee-sys \
    --ssh-config="${DIR}/test/terraform/output/test/ssh/client_config" \
    --hosts='ssh://test-test1-database1-blue' "${DIR}/test/test-test1-database1-blue-after-bootstrap.py"
}

function task_test_after_instance_rebuild {
  python_ensure_venv "${DIR}"

  "${VENV_DIR}/bin/py.test" \
    --capture=tee-sys \
    --ssh-config="${DIR}/test/terraform/output/test/ssh/client_config" \
    --hosts='ssh://test-test1-database1-blue' "${DIR}/test/test-test1-database1-blue-after-instance-rebuild.py"
}

function task_test_after_storage_rebuild {
  python_ensure_venv "${DIR}"

  "${VENV_DIR}/bin/py.test" \
    --capture=tee-sys \
    --ssh-config="${DIR}/test/terraform/output/test/ssh/client_config" \
    --hosts='ssh://test-test1-database1-blue' "${DIR}/test/test-test1-database1-blue-after-storage-rebuild.py"
}

function task_test_ansible {
  python_ensure_venv "${DIR}"
  local database1_primary_node=$(test_terraform "instance" output database1_blue_name)
  local database2_primary_node=$(test_terraform "instance" output database2_blue_name)

  "${VENV_DIR}/bin/ansible-galaxy" \
    collection install \
    --force \
    -v \
    -r "${DIR}/test/ansible/requirements.yml"

  "${VENV_DIR}/bin/ansible-playbook" \
    -i "${DIR}/test/terraform/output/test/ansible/blcks_rds_postgres_inventory.yml" \
    --extra-vars "@${DIR}/test/terraform/output/test/ansible/blcks_rds_postgres_variables.yml" \
    --extra-vars "database1_primary_node=${database1_primary_node}" \
    --extra-vars "database2_primary_node=${database2_primary_node}" \
    "${DIR}/test/ansible/site.yml" "$@"
}

function task_build {
  python_ensure_venv "${DIR}"
  mkdir -p "${DIR}/build"
  "${VENV_DIR}/bin/ansible-galaxy" \
    collection build \
    --output-path "${DIR}/build" \
    --force \
    --verbose \
    "${DIR}/ansible/blcks/rds_postgresql"
  blcks docs ansible --collection "${DIR}/ansible/blcks/rds_postgresql" --target ~/git/solidblocks/doc/content/ansible/rds_postgresql
}

function task_release_prepare {
  local version="${1:-}"

  if [[ -z "${version}" ]]; then
    echo "no version set"
    exit 1
  fi
  echo "setting version: ${version}"
}

function task_clean {

  #scw object config install type=rclone || true
  rclone purge scaleway:test-test1-backup || true
  local policy_id="$(scw iam policy list --output json | jq -r '.[] | select(.name == "test-test1-backup").id')"
  scw iam policy delete "${policy_id}" || true

  local application_id="$(scw iam application list --output json | jq -r '.[] | select(.name == "test-test1-backup").id')"
  scw iam application delete "${application_id}" || true

  blcks hetzner nuke --do-nuke

  rm -rf "${DIR}/build"
  rm -rf ${DIR}/test/**/.terraform
  rm -rf ${DIR}/test/**/*.tfstate
  rm -rf ${DIR}/test/**/*.tfstate.backup
  rm -rf ${DIR}/test/**/*.lock.hcl
}

function task_format {
  (
    cd "${DIR}/test"
    terraform fmt -recursive
  )
}

function task_test() {
  if [[ "${SKIP_TESTS:-}" == "true" ]]; then
    exit 0
  fi

 echo "====================================================================================="
 echo "task_test_terraform"
 echo "====================================================================================="
 task_test_terraform

 echo "====================================================================================="
 echo "task_test_ansible"
 echo "====================================================================================="
 task_test_ansible

 echo "====================================================================================="
 echo "task_test_after_bootstrap"
 echo "====================================================================================="
 task_test_after_bootstrap

 echo "====================================================================================="
 echo "task_full_backup"
 echo "====================================================================================="
 task_full_backup

 echo "====================================================================================="
 echo "task_destroy_instances"
 echo "====================================================================================="
 task_destroy_instances

 echo "====================================================================================="
 echo "task_test_terraform"
 echo "====================================================================================="
 task_test_terraform

 echo "====================================================================================="
 echo "task_test_ansible"
 echo "====================================================================================="
 task_test_ansible

 echo "====================================================================================="
 echo "task_test_after_instance_rebuild"
 echo "====================================================================================="
 task_test_after_instance_rebuild

 echo "====================================================================================="
 echo "task_destroy_instances"
 echo "====================================================================================="
 task_destroy_instances

 echo "====================================================================================="
 echo "task_destroy_storage"
 echo "====================================================================================="
 task_destroy_storage

 echo "====================================================================================="
 echo "task_test_terraform"
 echo "====================================================================================="
 task_test_terraform

 echo "====================================================================================="
 echo "task_test_ansible"
 echo "====================================================================================="
 task_test_ansible

 echo "====================================================================================="
 echo "task_test_after_storage_rebuild"
 echo "====================================================================================="
 task_test_after_storage_rebuild
}

arg=${1:-}
shift || true
case ${arg} in
  build) task_build "$@" ;;
  test) task_test ;;
  test-terraform) task_test_terraform ;;
  test-ansible) task_test_ansible "$@" ;;
  test-after-bootstrap) task_test_after_bootstrap ;;
  test-destroy-instances) task_destroy_instances ;;
  test-after-instance-rebuild) task_test_after_instance_rebuild ;;
  test-destroy-storage) task_destroy_storage ;;
  test-after-storage-rebuild) task_test_after_storage_rebuild ;;
  test-full-backup) task_full_backup ;;
  format) task_format "$@" ;;
  clean) task_clean "$@" ;;
  release-artifacts) task_release_artifacts "$@" ;;
  release-prepare) task_release_prepare "$@" ;;
  release-test);;
  *) task_usage ;;
esac